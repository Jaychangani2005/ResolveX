import { IncidentReport } from '../types/user';

// PDF Export Service for Government Users
export interface PDFExportOptions {
  title: string;
  data: any[];
  type: 'reports' | 'analytics' | 'dashboard';
  dateRange?: {
    start: Date;
    end: Date;
  };
}

export interface AnalyticsData {
  totalReports: number;
  totalUsers: number;
  activeUsers: number;
  totalPoints: number;
  recentReports: number;
  weeklyUsers: number;
  mangroveAreas: number;
  averagePointsPerUser: number;
}

// Mock PDF generation function (in a real app, you'd use a library like react-native-pdf or expo-print)
export const generatePDF = async (options: PDFExportOptions): Promise<string> => {
  try {
    console.log('üìÑ Generating PDF export:', options.title);
    
    // In a real implementation, you would:
    // 1. Use expo-print to generate HTML
    // 2. Convert HTML to PDF
    // 3. Save to device or share
    
    const htmlContent = generateHTMLContent(options);
    
    // For now, we'll return a mock PDF URL
    // In production, you'd use expo-print and expo-sharing
    // Use a simpler approach to avoid base64 encoding issues
    const mockPDFUrl = `data:text/html;charset=utf-8,${encodeURIComponent(htmlContent)}`;
    
    console.log('‚úÖ PDF generated successfully');
    return mockPDFUrl;
  } catch (error) {
    console.error('‚ùå Error generating PDF:', error);
    throw new Error('Failed to generate PDF export');
  }
};

const generateHTMLContent = (options: PDFExportOptions): string => {
  const { title, data, type, dateRange } = options;
  const currentDate = new Date().toLocaleDateString();
  
  let content = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 10px; margin-bottom: 20px; }
        .title { font-size: 24px; font-weight: bold; color: #333; }
        .subtitle { font-size: 14px; color: #666; margin-top: 5px; }
        .section { margin: 20px 0; }
        .section-title { font-size: 18px; font-weight: bold; color: #333; margin-bottom: 10px; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f5f5f5; font-weight: bold; }
        .stats-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin: 10px 0; }
        .stat-item { border: 1px solid #ddd; padding: 10px; text-align: center; }
        .stat-number { font-size: 20px; font-weight: bold; color: #333; }
        .stat-label { font-size: 12px; color: #666; }
        .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #666; }
      </style>
    </head>
    <body>
      <div class="header">
        <div class="title">${title}</div>
        <div class="subtitle">Generated on ${currentDate}</div>
        ${dateRange ? `<div class="subtitle">Date Range: ${dateRange.start.toLocaleDateString()} - ${dateRange.end.toLocaleDateString()}</div>` : ''}
      </div>
  `;

  switch (type) {
    case 'reports':
      content += generateReportsContent(data as IncidentReport[]);
      break;
    case 'analytics':
      content += generateAnalyticsContent(data as AnalyticsData);
      break;
    case 'dashboard':
      content += generateDashboardContent(data);
      break;
    case 'incident':
      content += generateIncidentContent(data[0] as IncidentReport);
      break;
  }

  content += `
      <div class="footer">
        <p>MangroveWatch Government Report</p>
        <p>Generated by Government Dashboard</p>
      </div>
    </body>
    </html>
  `;

  return content;
};

const generateReportsContent = (reports: IncidentReport[]): string => {
  return `
    <div class="section">
      <div class="section-title">Incident Reports Summary</div>
      <div class="stats-grid">
        <div class="stat-item">
          <div class="stat-number">${reports.length}</div>
          <div class="stat-label">Total Reports</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${reports.filter(r => r.status === 'pending').length}</div>
          <div class="stat-label">Pending Review</div>
        </div>
      </div>
    </div>
    
    <div class="section">
      <div class="section-title">Recent Reports</div>
      <table>
        <thead>
          <tr>
            <th>Date</th>
            <th>User</th>
            <th>Location</th>
            <th>Description</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          ${reports.slice(0, 20).map(report => `
            <tr>
              <td>${report.createdAt.toLocaleDateString()}</td>
              <td>${report.userName || 'Anonymous'}</td>
              <td>${report.location?.city || 'Unknown'}</td>
              <td>${report.description?.substring(0, 50)}${report.description?.length > 50 ? '...' : ''}</td>
              <td>${report.status}</td>
            </tr>
          `).join('')}
        </tbody>
      </table>
    </div>
  `;
};

const generateAnalyticsContent = (analytics: AnalyticsData): string => {
  return `
    <div class="section">
      <div class="section-title">Analytics Overview</div>
      <div class="stats-grid">
        <div class="stat-item">
          <div class="stat-number">${analytics.totalReports}</div>
          <div class="stat-label">Total Reports</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${analytics.totalUsers}</div>
          <div class="stat-label">Total Users</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${analytics.activeUsers}</div>
          <div class="stat-label">Active Users</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${analytics.totalPoints}</div>
          <div class="stat-label">Total Points</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${analytics.recentReports}</div>
          <div class="stat-label">Recent Reports (24h)</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${analytics.weeklyUsers}</div>
          <div class="stat-label">New Users (Week)</div>
        </div>
      </div>
    </div>
    
    <div class="section">
      <div class="section-title">Key Metrics</div>
      <table>
        <tr>
          <td>Average Points per User</td>
          <td>${analytics.averagePointsPerUser}</td>
        </tr>
        <tr>
          <td>Mangrove Areas Monitored</td>
          <td>${analytics.mangroveAreas}</td>
        </tr>
        <tr>
          <td>User Engagement Rate</td>
          <td>${analytics.totalUsers > 0 ? Math.round((analytics.activeUsers / analytics.totalUsers) * 100) : 0}%</td>
        </tr>
      </table>
    </div>
  `;
};

const generateDashboardContent = (data: any): string => {
  return `
    <div class="section">
      <div class="section-title">Dashboard Summary</div>
      <div class="stats-grid">
        <div class="stat-item">
          <div class="stat-number">${data.totalReports || 0}</div>
          <div class="stat-label">Total Reports</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${data.totalUsers || 0}</div>
          <div class="stat-label">Total Users</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${data.activeUsers || 0}</div>
          <div class="stat-label">Active Users</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${data.recentReports || 0}</div>
          <div class="stat-label">Recent Reports</div>
        </div>
      </div>
    </div>
  `;
};

const generateIncidentContent = (incident: IncidentReport): string => {
  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  return `
    <div class="section">
      <div class="section-title">Incident Report Details</div>
      
      <table style="width: 100%; margin-bottom: 20px;">
        <tr>
          <td style="font-weight: bold; width: 30%;">Report ID:</td>
          <td>${incident.id}</td>
        </tr>
        <tr>
          <td style="font-weight: bold;">Reported By:</td>
          <td>${incident.userName || 'Anonymous'}</td>
        </tr>
        <tr>
          <td style="font-weight: bold;">Email:</td>
          <td>${incident.userEmail}</td>
        </tr>
        <tr>
          <td style="font-weight: bold;">Date Reported:</td>
          <td>${formatDate(incident.createdAt)}</td>
        </tr>
        <tr>
          <td style="font-weight: bold;">Last Updated:</td>
          <td>${formatDate(incident.updatedAt)}</td>
        </tr>
        <tr>
          <td style="font-weight: bold;">AI Validation:</td>
          <td>${incident.aiValidated ? '‚úÖ Validated' : '‚è≥ Pending Validation'}</td>
        </tr>
      </table>
    </div>
    
    <div class="section">
      <div class="section-title">Description</div>
      <p style="line-height: 1.6; margin: 10px 0;">${incident.description}</p>
    </div>
    
    <div class="section">
      <div class="section-title">Location Information</div>
      <table style="width: 100%;">
        <tr>
          <td style="font-weight: bold; width: 30%;">City:</td>
          <td>${incident.location?.city || 'Unknown'}</td>
        </tr>
        <tr>
          <td style="font-weight: bold;">State:</td>
          <td>${incident.location?.state || 'Unknown'}</td>
        </tr>
        <tr>
          <td style="font-weight: bold;">Country:</td>
          <td>${incident.location?.country || 'Unknown'}</td>
        </tr>
        <tr>
          <td style="font-weight: bold;">Coordinates:</td>
          <td>${incident.location?.latitude?.toFixed(6)}, ${incident.location?.longitude?.toFixed(6)}</td>
        </tr>
        ${incident.location?.fullAddress ? `
        <tr>
          <td style="font-weight: bold;">Full Address:</td>
          <td>${incident.location.fullAddress}</td>
        </tr>
        ` : ''}
      </table>
    </div>
    
    ${incident.adminNotes ? `
    <div class="section">
      <div class="section-title">Admin Notes</div>
      <p style="line-height: 1.6; margin: 10px 0; font-style: italic;">${incident.adminNotes}</p>
    </div>
    ` : ''}
  `;
};

// Export functions for different data types
export const exportReportsToPDF = async (reports: IncidentReport[]): Promise<string> => {
  return generatePDF({
    title: 'MangroveWatch Incident Reports',
    data: reports,
    type: 'reports'
  });
};

export const exportAnalyticsToPDF = async (analytics: AnalyticsData): Promise<string> => {
  return generatePDF({
    title: 'MangroveWatch Analytics Report',
    data: analytics,
    type: 'analytics'
  });
};

export const exportDashboardToPDF = async (dashboardData: any): Promise<string> => {
  return generatePDF({
    title: 'MangroveWatch Dashboard Summary',
    data: dashboardData,
    type: 'dashboard'
  });
};

// Export individual incident report to PDF
export const exportIncidentToPDF = async (incident: IncidentReport): Promise<string> => {
  return generatePDF({
    title: `Incident Report - ${incident.id}`,
    data: [incident],
    type: 'incident'
  });
};
